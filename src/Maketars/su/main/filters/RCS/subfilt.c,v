head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2011.11.12.00.09.00;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.23.23.35.11;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.18;

1.18
date	97.08.28.16.20.10;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.09.05.19.15.58;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.01.29.17.02.32;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.01.24.18.26.40;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.08.02.19.09.23;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	94.08.25.14.58.54;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	94.03.30.13.53.29;	author john;	state Exp;
branches;
next	1.11;

1.11
date	93.12.14.13.41.17;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	93.11.24.11.26.31;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.26.10.53.09;	author john;	state Exp;
branches;
next	1.8;

1.8
date	91.10.09.14.27.04;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	91.01.28.13.13.02;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	91.01.26.20.53.23;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	91.01.19.18.37.54;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	91.01.18.16.14.19;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	91.01.13.17.29.14;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	91.01.07.22.19.20;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	91.01.07.22.04.32;	author jkc;	state Exp;
branches;
next	;


desc
@Band pass filtering using Butterworth routines (cwplib/bf.c)
@


1.21
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUBFILT: $Revision: 1.20 $ ; $Date: 2004/12/23 23:35:11 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUBFILT - apply Butterworth bandpass filter 			",
" 								",
" subfilt <stdin >stdout [optional parameters]			",
" 							        ",
" Required parameters:						",
" 	if dt is not set in header, then dt is mandatory	",
" 							        ",
" Optional parameters: (nyquist calculated internally)		",
" 	zerophase=1		=0 for minimum phase filter 	",
" 	locut=1			=0 for no low cut filter 	",
" 	hicut=1			=0 for no high cut filter 	",
" 	fstoplo=0.10*(nyq)	freq(Hz) in low cut stop band	",
" 	astoplo=0.05		upper bound on amp at fstoplo 	",
" 	fpasslo=0.15*(nyq)	freq(Hz) in low cut pass band	",
" 	apasslo=0.95		lower bound on amp at fpasslo 	",
" 	fpasshi=0.40*(nyq)	freq(Hz) in high cut pass band	",
" 	apasshi=0.95		lower bound on amp at fpasshi 	",
" 	fstophi=0.55*(nyq)	freq(Hz) in high cut stop band	",
" 	astophi=0.05		upper bound on amp at fstophi 	",
" 	verbose=0		=1 for filter design info 	",
" 	dt = (from header)	time sampling interval (sec)	",
" 							        ",
NULL};

/* Credits:
 *	CWP: Dave for bf.c subs and test drivers
 *	CWP: Jack for su wrapper
 *
 * Caveat: zerophase will not do good if trace has a spike near
 *	   the end.  One could make a try at getting the "effective"
 *	   length of the causal filter, but padding the traces seems
 *	   painful in an already expensive algorithm.
 *
 * Trace header fields accessed: ns, dt, trid
 */
/**************** end self doc ***********************************/



segy tr;

int
main(int argc, char **argv)
{
	int zerophase;		/* flag for zero phase filtering	*/
	int locut;		/* flag for low cut filtering		*/
	int hicut;		/* flag for high cut filtering		*/
	float fstoplo;		/* left lower corner frequency		*/
	float fpasslo;		/* left upper corner frequency		*/
	float fpasshi;		/* right lower corner frequency		*/
	float fstophi;		/* right upper corner frequency		*/
	float astoplo;		/* amp at fstoplo			*/
	float apasslo;		/* amp at fpasslo			*/
	float apasshi;		/* amp at fpasshi			*/
	float astophi;		/* amp at fstophi			*/
	int npoleslo;		/* poles in low cut filter		*/
	int npoleshi;		/* poles in high cut filter		*/
	float f3dblo;		/* 3 db point of low cut filter		*/
	float f3dbhi;		/* 3 db point of high cut filter	*/
	float dt;		/* sample spacing			*/
	float nyq;		/* nyquist frequency			*/
	int nt;			/* number of points on input trace	*/
	int verbose;		/* design info flag 			*/
	cwp_Bool seismic;	/* is this seismic data?		*/

	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
		 
	if (!seismic)
		warn("input is not seismic data, trid=%d", tr.trid);
	nt = tr.ns;
	if (!getparfloat("dt", &dt))	dt = ((double) tr.dt)/1000000.0;
	if (!dt) err("dt field is zero and not getparred");
	nyq = 0.5/dt;


	/* Get design frequencies and amplitudes */
	if (!getparint("verbose", &verbose))	verbose = 0;
	if (!getparint("zerophase", &zerophase)) zerophase = 1;
	if (!getparint("locut", &locut))	locut = 1;
	if (!getparint("hicut", &hicut))	hicut = 1;
	if (!getparfloat("fstoplo", &fstoplo))	fstoplo = .10 * nyq;
	if (!getparfloat("fpasslo", &fpasslo))	fpasslo = .15 * nyq;
	if (!getparfloat("fpasshi", &fpasshi))	fpasshi = .40 * nyq;
	if (!getparfloat("fstophi", &fstophi))	fstophi = .55 * nyq;
	if (locut) {
		if (fstoplo <= 0.0)      err("fstoplo must be positive");
		if (fstoplo > fpasslo)  err("fstoplo must be < fpasslo");
	}
	if (hicut) {
		if (fpasshi > fstophi)  err("fpasshi must be < fstophi");
		if (fstophi > nyq)  err("fstophi must be < nyquist (%f)", nyq);
	}
	if (!getparfloat("astoplo", &astoplo))	astoplo = .05;
	if (!getparfloat("apasslo", &apasslo))	apasslo = .95;
	if (!getparfloat("apasshi", &apasshi))	apasshi = .95;
	if (!getparfloat("astophi", &astophi))	astophi = .05;
	if (astoplo > apasslo || apasshi < astophi)
		err("Bad amplitude parameters");
		
		
	/* Normalize frequencies to [0, 0.5] for bfdesign */
	fstoplo *= dt;
	fpasslo *= dt;
	fstophi *= dt;
	fpasshi *= dt;
	
	
	/* Adapt user frequencies if zerophase selected */
	if (zerophase) {	
		astoplo = sqrt(astoplo);
		apasslo = sqrt(apasslo);
		astophi = sqrt(astophi);
		apasshi = sqrt(apasshi);
	}

	
	/* Use bdesign to make low and high cut filters */
	if (locut) bfdesign(fpasslo,apasslo,fstoplo,astoplo,&npoleslo,&f3dblo);
	if (hicut) bfdesign(fpasshi,apasshi,fstophi,astophi,&npoleshi,&f3dbhi);


	/* Give verbose info if requested */
	if (verbose && locut) {
		if (zerophase) {
			warn("low-cut filter: npoles = %d, 3db point = %f(Hz)",
				2*npoleslo, f3dblo/dt);
		} else {
			warn("low-cut filter: npoles = %d, 3db point = %f(Hz)",
				npoleslo, f3dblo/dt);
		}
	}
	if (verbose && hicut) {
		if (zerophase) {
			warn("high-cut filter: npoles = %d, 3db point = %f(Hz)",
				2*npoleshi, f3dbhi/dt);
		} else {
			warn("high-cut filter: npoles = %d, 3db point = %f(Hz)",
				npoleshi, f3dbhi/dt);

		}
	}

	/* Main loop over traces */
	do {
		/* low-cut (high pass) filter */
		if (locut) {
		    bfhighpass(npoleslo,f3dblo,nt,tr.data,tr.data);
		    if (zerophase) {
			register int i;
		        for (i=0; i<nt/2; ++i) { /* reverse trace in place */
				register float tmp = tr.data[i];
				tr.data[i] = tr.data[nt-1 - i];
				tr.data[nt-1 - i] = tmp;
			}
		        bfhighpass(npoleslo,f3dblo,nt,tr.data,tr.data);
		        for (i=0; i<nt/2; ++i) { /* flip trace back */
				register float tmp = tr.data[i];
				tr.data[i] = tr.data[nt-1 - i];
				tr.data[nt-1 - i] = tmp;
			}
		    }
		}

		/* high-cut (low pass) filter */
		if (hicut) {
		    bflowpass(npoleshi,f3dbhi,nt,tr.data,tr.data);
		    if (zerophase) {
			register int i;
			for (i=0; i<nt/2; ++i) { /* reverse trace */
				register float tmp = tr.data[i];
				tr.data[i] = tr.data[nt-1 - i];
				tr.data[nt-1 - i] = tmp;
			}
			bflowpass(npoleshi,f3dbhi,nt,tr.data,tr.data);
		        for (i=0; i<nt/2; ++i) { /* flip trace back */
				register float tmp = tr.data[i];
				tr.data[i] = tr.data[nt-1 - i];
				tr.data[nt-1 - i] = tmp;
			}
		    }
		}
		
		puttr(&tr);
	} while (gettr(&tr));

	return(CWP_Exit());
}
@


1.20
log
@changed "err" to "warn" for nonseismic data
@
text
@d1 4
a4 1
/* SUBFILT: $Revision: 1.19 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.19
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.18 $ ; $Date: 1997/08/28 16:20:10 $	*/
d85 1
a85 1
		err("input is not seismic data, trid=%d", tr.trid);
@


1.18
log
@added Toralf's fix.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.17 $ ; $Date: 1996/09/05 19:15:58 $	*/
d139 2
a140 2
	if (verbose && locut)
		if (zerophase)
d143 1
a143 1
		else
d146 4
a149 2
	if (verbose && hicut)
		if (zerophase)
d152 1
a152 1
		else
d156 2
d202 1
a202 1
	return EXIT_SUCCESS;
@


1.17
log
@Fixed -Wall complaint.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.16 $ ; $Date: 1996/01/29 17:02:32 $	*/
d102 1
a102 1
		if (fstoplo < 0.0)      err("fstoplo must be positive");
@


1.16
log
@Say sampling INTERVAL instead of rate to make Ken happy.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.15 $ ; $Date: 1996/01/24 18:26:40 $	*/
d50 1
@


1.15
log
@Handle header fields accessed/modified for sudoc.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.14 $ ; $Date: 1995/08/02 19:09:23 $	*/
d29 1
a29 1
" 	dt = (from header)	time sampling rate (sec)	",
@


1.14
log
@Cast the integer tr.dt to double before division with floating
constant (which is implicitly double precision).  Casting is
needed to make some compilers happy and if we cast to float then
there will be an extra conversion to double because of the floating
constant (casting to float and writing 1000000.0F would save a
conversion, but most people find that F yucky and efficiency is
not an issue here).  Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.13 $ ; $Date: 1994/08/25 14:58:54 $	*/
d41 2
@


1.13
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.12 $ ; $Date: 94/03/30 13:53:29 $	*/
d84 1
a84 1
	if (!getparfloat("dt", &dt))	dt = (float) tr.dt/1000000.0;
@


1.12
log
@added ISSEISMIC macro
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.11 $ ; $Date: 93/12/14 13:41:17 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a31 1
/**************** end self doc ***********************************/
d42 1
@


1.11
log
@Enlarged notion of seismic trace to include DEAD, etc.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.10 $ ; $Date: 93/11/24 11:26:31 $	*/
d92 2
a93 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.10
log
@explicit cast added
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.9 $ ; $Date: 92/10/26 10:53:09 $	*/
d82 1
d92 3
a94 1
	if (tr.trid && tr.trid != TREAL)
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.8 $ ; $Date: 91/10/09 14:27:04 $	*/
d94 1
a94 1
	if (!getparfloat("dt", &dt))	dt = tr.dt/1000000.0;
@


1.8
log
@string -> String
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.7 $ ; $Date: 91/01/28 13:13:02 $	*/
d20 25
a44 25
String sdoc =
" 								\n"
" SUBFILT - apply Butterworth bandpass filter 			\n"
" 								\n"
" subfilt <stdin >stdout [optional parameters]			\n"
" 							        \n"
" Required parameters:						\n"
" 	if dt is not set in header, then dt is mandatory	\n"
" 							        \n"
" Optional parameters: (nyquist calculated internally)		\n"
" 	zerophase=1		=0 for minimum phase filter 	\n"
" 	locut=1			=0 for no low cut filter 	\n"
" 	hicut=1			=0 for no high cut filter 	\n"
" 	fstoplo=0.10*(nyq)	freq(Hz) in low cut stop band	\n"
" 	astoplo=0.05		upper bound on amp at fstoplo 	\n"
" 	fpasslo=0.15*(nyq)	freq(Hz) in low cut pass band	\n"
" 	apasslo=0.95		lower bound on amp at fpasslo 	\n"
" 	fpasshi=0.40*(nyq)	freq(Hz) in high cut pass band	\n"
" 	apasshi=0.95		lower bound on amp at fpasshi 	\n"
" 	fstophi=0.55*(nyq)	freq(Hz) in high cut stop band	\n"
" 	astophi=0.05		upper bound on amp at fstophi 	\n"
" 	verbose=0		=1 for filter design info 	\n"
" 	dt = (from header)	time sampling rate (sec)	\n"
" 							        \n"
;
d86 1
a86 1
	askdoc(1);
@


1.7
log
@Detailed err msgs
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.3 $ ; $Date: 91/01/19 18:34:21 $	*/
d20 1
a20 1
string sdoc =
@


1.6
log
@Fixed bug: was checking for lopass vs hipass which doesn't
make sense except in bandpass case.  (Thx Herman J.)
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.5 $ ; $Date: 91/01/19 18:37:54 $	*/
d108 8
a115 3
	if (fstoplo < 0.0 || fstoplo > fpasslo ||
	    		     fpasshi > fstophi || fstophi > nyq)
		err("Bad filter parameters");
@


1.5
log
@Added caveat about spikes at the end of traces
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.3 $ ; $Date: 91/01/19 18:34:21 $	*/
d109 1
a109 1
	    fpasslo >= fpasshi || fpasshi > fstophi || fstophi > nyq)
@


1.4
log
@Fix amp for zerophase option, so it won't be squared.
Better verbose.
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.2 $ ; $Date: 91/01/18 16:12:07 $	*/
d50 5
d143 1
a143 1
			warn("low-cut filter: npoles = %d, 6db point = %f(Hz)",
d150 1
a150 1
			warn("high-cut filter: npoles = %d, 6db point = %f(Hz)",
@


1.3
log
@Added zero-phase option (as default).
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.2 $ ; $Date: 91/01/07 22:19:20 $	*/
d112 2
a113 2


d119 9
d129 1
a129 1

d137 6
a142 2
		warn("low-cut filter: npoles = %d, 3db point = %f(Hz)",
			npoleslo, f3dblo/dt);
d144 6
a149 2
		warn("high-cut filter: npoles = %d, 3db point = %f(Hz)",
			npoleshi, f3dbhi/dt);
@


1.2
log
@Tweaked a comment
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.1 $ ; $Date: 91/01/07 22:04:32 $	*/
d24 1
a24 1
" suband <stdin >stdout [optional parameters]			\n"
d30 1
d33 9
a41 8
" 	fstoplo=0.12*(nyq)	freq(Hz) in low cut stop band	\n"
" 	astoplo=0.25		upper bound on amp at fstoplo 	\n"
" 	fpasslo=0.17*(nyq)	freq(Hz) in low cut pass band	\n"
" 	apasslo=0.75		lower bound on amp at fpasslo 	\n"
" 	fpasshi=0.45*(nyq)	freq(Hz) in high cut pass band	\n"
" 	apasshi=0.75		lower bound on amp at fpasshi 	\n"
" 	fstophi=0.50*(nyq)	freq(Hz) in high cut stop band	\n"
" 	astophi=0.25		upper bound on amp at fstophi 	\n"
d58 1
d76 1
d95 8
a102 6
	if (!getparint  ("locut", &locut))	locut = 1;
	if (!getparint  ("hicut", &hicut))	hicut = 1;
	if (!getparfloat("fstoplo", &fstoplo))	fstoplo = .12 * nyq;
	if (!getparfloat("fpasslo", &fpasslo))	fpasslo = .17 * nyq;
	if (!getparfloat("fpasshi", &fpasshi))	fpasshi = .45 * nyq;
	if (!getparfloat("fstophi", &fstophi))	fstophi = .50 * nyq;
d106 4
a109 4
	if (!getparfloat("astoplo", &astoplo))	astoplo = .25;
	if (!getparfloat("apasslo", &apasslo))	apasslo = .75;
	if (!getparfloat("apasshi", &apasshi))	apasshi = .75;
	if (!getparfloat("astophi", &astophi))	astophi = .25;
d122 2
a123 2
	bfdesign(fpasslo,apasslo,fstoplo,astoplo,&npoleslo,&f3dblo);
	bfdesign(fpasshi,apasshi,fstophi,astophi,&npoleshi,&f3dbhi);
d126 9
d137 18
a154 2
		/* If requested, apply low-cut (high pass) filter */
		if (locut) bfhighpass(npoleslo,f3dblo,nt,tr.data,tr.data);
d156 18
a173 2
		/* If requested, apply high-cut (low pass) filter */
		if (hicut) bflowpass(npoleshi,f3dbhi,nt,tr.data,tr.data);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUBFILT: $Revision: 1.5 $ ; $Date: 90/12/17 17:50:27 $	*/
d115 1
a115 1
	/* Use bdesign to make low and high pass filters */
@
