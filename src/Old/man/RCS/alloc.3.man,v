head     1.2;
branch   ;
access   jkc john;
symbols  ;
locks    ; strict;
comment  @@;


1.2
date     94.02.11.13.38.39;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     94.02.11.13.30.54;  author jkc;  state Exp;
branches ;
next     ;


desc
@alloc man page
@


1.2
log
@Unwrapped lines, added a paren, etc.
@
text
@.TH ALLOC 3CWP CWP
.UC 4
.SH NAME
alloc1, realloc1, free1, alloc2, free2, alloc3, free3, alloc4,
free4, alloc1int, realloc1int, free1int, alloc2int, free2int,
alloc3int, free3int, alloc1float, realloc1float, free1float,
alloc2float, free2float, alloc3float, free3float, alloc1double,
realloc1double, free1double, alloc2double, free2double, alloc3double,
free3double, alloc1complex, realloc1complex, free1complex,
alloc2complex, free2complex, alloc3complex, free3complex

\- allocate vectors and higher dimensional arrays

.SH SYNOPSIS
.nf
.B #include """cwp.h"""
.PP
.B "void *alloc1 (size_t n1, size_t size)"
.PP
.B "void *realloc1 (void *v, size_t n1, size_t size)"
.PP
.B "void **alloc2 (size_t n1, size_t n2, size_t size)"
.PP
.B "void ***alloc3 (size_t n1, size_t n2, size_t n3, size_t size)"
.PP
.B "void ****alloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size)"
.PP
.B "void free1 (void *p)"
.PP
.B "void free2 (void **p)"
.PP
.B "void free3 (void ***p)"
.PP
.B "void free4 (void ****p)"
.PP
.B "int *alloc1int (size_t n1)"
.PP
.B "int *realloc1int (int *v, size_t n1)"
.PP
.B "int **alloc2int (size_t n1, size_t n2)"
.PP
.B "int ***alloc3int (size_t n1, size_t n2, size_t n3)"
.PP
.B "float *alloc1float (size_t n1)"
.PP
.B "float *realloc1float (float *v, size_t n1)"
.PP
.B "float **alloc2float (size_t n1, size_t n2)"
.PP
.B "float ***alloc3float (size_t n1, size_t n2, size_t n3)"
.PP
.B "double *alloc1double (size_t n1)"
.PP
.B "double *realloc1double (double *v, size_t n1)"
.PP
.B "double **alloc2double (size_t n1, size_t n2)"
.PP
.B "double ***alloc3double (size_t n1, size_t n2, size_t n3)"
.PP
.B "complex *alloc1complex (size_t n1)"
.PP
.B "complex *realloc1complex (complex *v, size_t n1)"
.PP
.B "complex **alloc2complex (size_t n1, size_t n2)"
.PP
.B "complex ***alloc3complex (size_t n1, size_t n2, size_t n3)"
.PP
.B "void free1int (int *p)"
.PP
.B "void free2int (int **p)"
.PP
.B "void free3int (int ***p)"
.PP
.B "void free1float (float *p)"
.PP
.B "void free2float (float **p)"
.PP
.B "void free3float (float ***p)"
.PP
.B "void free1double (double *p)"
.PP
.B "void free2double (double **p)"
.PP
.B "void free3double (double ***p)"
.PP
.B "void free1complex (complex *p)"
.PP
.B "void free2complex (complex **p)"
.PP
.B "void free3complex (complex ***p)"
.fi

.SH DESCRIPTION
.I alloc1
allocate a 1-d array
.PP
.I realloc1
re-allocate a 1-d array
.PP
.I free1
free a 1-d array
.PP
.I alloc2
allocate a 2-d array
.PP
.I free2
free a 2-d array
.PP
.I alloc3
allocate a 3-d array
.PP
.I free3
free a 3-d array
.PP
.I alloc4
allocate a 4-d array
.PP
.I free4
free a 4-d array
.PP
.I alloc1int
allocate a 1-d array of ints
.PP
.I realloc1int
re-allocate a 1-d array of ints
.PP
.I free1int
free a 1-d array of ints
.PP
.I alloc2int
allocate a 2-d array of ints
.PP
.I free2int
free a 2-d array of ints
.PP
.I alloc3int
allocate a 3-d array of ints
.PP
.I free3int
free a 3-d array of ints
.PP
.I alloc1float
allocate a 1-d array of floats
.PP
.I realloc1float 
re-allocate a 1-d array of floats
.PP
.I free1float
free a 1-d array of floats
.PP
.I alloc2float
allocate a 2-d array of floats
.PP
.I free2float
free a 2-d array of floats
.PP
.I alloc3float
allocate a 3-d array of floats
.PP
.I free3float
free a 3-d array of floats
.PP
.I alloc1double
allocate a 1-d array of doubles
.PP
.I realloc1double
re-allocate a 1-d array of doubles
.PP
.PP
.I free1double
free a 1-d array of doubles
.PP
.I alloc2double
allocate a 2-d array of doubles
.PP
.I free2double
free a 2-d array of doubles
.PP
.I alloc3double
allocate a 3-d array of doubles
.PP
.I free3double
free a 3-d array of doubles
.PP
.I alloc1complex
allocate a 1-d array of complexs
.PP
.I realloc1complex
re-allocate a 1-d array of complexs
.PP
.I free1complex
free a 1-d array of complexs
.PP
.I alloc2complex
allocate a 2-d array of complexs
.PP
.I free2complex
free a 2-d array of complexs
.PP
.I alloc3complex
allocate a 3-d array of complexs
.PP
.I free3complex
free a 3-d array of complexs
.PP
These routines are contained in the package .../cwp/lib/alloc.c.
At the
.I par
level consider using the corresponding functions in the
package .../par/lib/ealloc.c.
.P
The
.I alloc
functions simplify manipulation of multi-dimensional arrays
in scientific programming in C (the 1-D allocation routines merely
supply a consistent interface).  These functions are useful only
because true multi-dimensional arrays in C cannot have variable
dimensions (as in Fortran).  For example, the following function
.B "is not"
valid in C:
.na
.nf
	void badFunc(a,n1,n2) float a[n2][n1]; {
		a[n2-1][n1-1] = 1.0;
	}
.fi
.ad
However, the following function
.I is
valid in C:
.na
.nf
	void goodFunc(a,n1,n2) float **a; {
		a[n2-1][n1-1] = 1.0;
	}
.fi
.ad
Therefore, the functions in this package do not allocate true
multi-dimensional arrays, as described in the C specification.
Instead, they allocate and initialize pointers (and pointers to
pointers) so that, for example, a[i2][i1] behaves like a 2-D array.
.PP
The array dimensions are numbered, which makes it easy to add
functions for arrays of higher dimensions.  In particular, the 1st
dimension of length n1 is always the fastest dimension, the 2nd
dimension of length n2 is the next fastest dimension, and so on.
.PP
Note that the 1st (fastest) dimension n1 is the first argument to
the allocation functions, but that the 1st dimension
is the last subscript in a[i2][i1].  (This is another important
difference between C and Fortran.)
.PP
The allocation of pointers to pointers implies that more storage
is required than is necessary to hold a true multi-dimensional
array.  The fraction of the total storage allocated that is used
to hold pointers is approximately 1/(n1+1).  This extra storage is
unlikely to represent a significant waste for large n1.
.PP
The functions defined below are significantly different from similar
functions described by Press et al, 1988, Numerical Recipes in C.
In particular, the functions defined below:
.na
.nf
	(1) Allocate arrays of arbitrary size elements.
	(2) Allocate contiguous storage for arrays.
	(3) Return NULL if allocation fails (just like malloc).
	(4) Do not provide arbitrary lower and upper bounds for arrays.
.fi
.ad
.PP
Contiguous storage enables an allocated multi-dimensional array to
be passed to a C function that expects a one-dimensional array.
For example, to allocate and zero an n1 by n2 two-dimensional array
of floats, one could use
.na
.nf
	a = alloc2(n1,n2,sizeof(float));
	zeroFloatArray(n1*n2,a[0]);
.fi
.ad
where zeroFloatArray is a function defined as
.na
.nf
	void zeroFloatArray(int n, float *a) {
		int i;
		for (i=0; i<n; i++)  a[i] = 0.0;
	}
.fi
.ad

.SH PARAMETERS
.TP 8
.I n1
is the number of items to be allocated in the fastest dimension.  The type
.I size_t
is defined in the ANSI C include file
.I stddef.h
as the unsigned integral type returned by the operator
.I sizeof.
.PP
.I "n2, n3, n4"
where applicable, are the number of items to be allocated in the second
fastest, third fastest and fourth fastest dimension.
.I size
is the size of a single pointer to an allocated item.
.I *v
is a pointer to an item of the desired type (e.g. int, float, ...).

.SH RETURN VALUE
The
.I alloc
routines 
return a pointer of the proper type to the head of the allocated array.

.SH USAGE EXAMPLE
.na
.nf
	float *fm;
	int i1, i2;
	int n1, n2;

	fm = alloc2float(n1, n2);
	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			fm[i2][i1] = ...   ;
			...
	}

	free2float(fm);
.fi
.ad

.SH DIAGNOSTICS
Returns
.I NULL
if memory cannot be allocated.  The analogous par level routines
(e.g., ealloc1float, ealloc2float, etc.) make the standard par
level fatal error exit when memory cannot be allocated.

.SH SEE ALSO
ealloc(3PAR), malloc(3)
.SH AUTHOR
Dave Hale.
.SH REVISION LEVEL
1.3 (90/04/21)

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.TH ALLOC1INT 3CWP CWP
d4 10
a13 2
alloc1, realloc1, free1, alloc2, free2, alloc3, free3, alloc4, free4, alloc1int, realloc1int, free1int, alloc2int, free2int, alloc3int, free3int, alloc1float, realloc1float, free1float, alloc2float, free2float, alloc3float, free3float, alloc1double, realloc1double, free1double, alloc2double, free2double, alloc3double, free3double, alloc1complex, realloc1complex, free1complex, alloc2complex, free2complex, alloc3complex, free3complex  \-
allocate vectors and higher dimensional arrays
d94 1
a94 1
.I Alloc1
d336 4
a339 2
if memory cannot be allocated.  The analogous par level routines (e.g., ealloc1float, ealloc2float, etc.,
make the standard par level fatal error exit when memory cannot be allocated.
@
