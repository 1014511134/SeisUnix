#! /bin/sh
# sudemo - how to use SU
# Usage : sudemo
#
# $Author: jkc $
# $Source: /src/su/demos/RCS/sudemo,v $
# $Revision: 1.22 $ ; $Date: 88/11/21 13:50:33 $

TESTDIR=./Sudemo
cd $TESTDIR

case $TERM in
masscomp)
	fill=1
	sz="sizet=10 sizex=13.8"
;;
*)
	fill=0
	sz="sizet=6.5 sizex=10.5"
;;
esac

trap "echo Gc; trap '' 0; exit 1" 0 1 2 3 15

echo "Gac"

time=12
bigtime=16

clg
echo
echo "  "
echo "              *******************************************************"
echo "              *                                                     *"
echo "              *        THIS SCRIPT GIVES AN INTRODUCTION TO         *"
echo "              *                                                     *"
echo "              *                     USE OF THE                      *"
echo "              *                                                     *"
echo "              *       SEISMIC UNIX (SU) PROCESSING ENVIRONMENT      *"
echo "              *                                                     *"
echo "              *                                                     *"
echo "              *                   Jack K. Cohen                     *"
echo "              *                                                     *"
echo "              *                                                     *"
echo "              *            THE CENTER FOR WAVE PHENOMENA            *"
echo "              *                 DEPT OF MATHEMATICS                 *"
echo "              *               COLORADO SCHOOL OF MINES              *"
echo "              *               GOLDEN, COLORADO 80401                *"
echo "              *                                                     *"
echo "              *                                                     *"
echo "              *******************************************************"
echo
sleep $time
clear
echo
echo
echo "		      The SU processing environment began at"
echo
echo "		      The Stanford Exploration Project (SEP)"
echo
echo "		      under the direction of Jon Claerbout."
echo ; echo ; echo

echo "		Professor Claerbout graciously allowed CWP to build on the"
echo
echo "		portion of the SEP library known as SY developed by"
echo
echo "		Shuki Ronen, Einar Kjartessen and other students at SEP."
echo ; echo ; echo

echo "		The CWP branch of the development started during the year"
echo
echo "		visit of Shuki Ronen and since then has been carried on by"
echo
echo "		Jack Cohen and the students at CWP."
echo ; echo ; echo

echo "		The goal at CWP is to build a body of coherent, readable,"
echo
echo "		portable code which will provide a public domain test bed"
echo
echo "		for academic and other small research groups."
echo ; echo ; echo

echo "===>  NOTE: All the utilities illustrated in this demo are being run in real time."
echo
sleep $bigtime
clear
echo
echo "===>  SUHELP - lists the names of the SU codes and shells"
echo
echo "% suhelp"
suhelp
sleep $time
clear
echo
echo "===>  SUFIND - search for relevant SU programs"
echo
echo "===>  As SUHELP told us, just typing the name of a command evokes \"self-documentation\"."
echo
echo "===>  Let's try that with SUFIND itself ..."
echo
echo
echo "% sufind"
sufind
echo
sleep $time
clear
echo
echo "===>  SUFIND searches for matching strings and gives the header lines of the \"hits\"."
echo
echo "===>  Let's look for programs relevant to comparing one data set to another."
echo
echo "===>  \"DIFF\" seems a likely string to try ..."
echo
echo
echo "% sufind diff"
echo
sufind diff
echo
echo "===>  ... we got one \"hit\" and one irrelevant program, not bad!"
echo
sleep $time
clear
echo
echo "===>  Here is another and more typical self-documentation (use SPACE to page the \"more\" program) ..."
echo
echo
echo "% suaddnoise"
suaddnoise
echo
sleep 4
clear
echo
echo "===>  The SU programs assume that the traces each have a standard SEG-Y header."
echo
echo "===>  However, many processing sequences begin with headerless traces."
echo
echo "===>  We illustrate this by making some traces with a simple C program ..."
echo
echo
echo "% more mktraces.c"
echo
more mktraces.c
echo
sleep $time
sleep $time
clear
echo
echo "===>  Run the mktraces program ..."
echo
echo
echo "% mktraces >BARE_TRACES"
mktraces >BARE_TRACES
echo
echo "===>  Use SUADDHEAD to put on an SEG-Y header with 64 samples per trace."
echo
echo "===>  While we are at it, pipe the results into SUSHW and"
echo
echo "===>  set the sampling rate header word at 4 ms (4000 microseconds!)."
echo
echo "% suaddhead <BARE_TRACES ns=64 | sushw key=dt a=4000 >SPIKES"
suaddhead <BARE_TRACES ns=64 | sushw key=dt a=4000 >SPIKES
echo
echo "===>  With the header on, we can view the traces ..."
echo
echo "% suwig <SPIKES | tube"
sleep $bigtime
clg
clear
suwig <SPIKES $sz fill=$fill | tube
sleep $time
clear
echo
echo "===>  Because of the large DECAY factor used in the mktraces program, only the first spike is visible."
echo
echo "===>  Let's use SUAGC to apply automatic gain control."
echo
echo "===>  Now we expect to see all 3 spikes ..."
echo
echo "% suagc <SPIKES | suwig | tube"
sleep $time
clg
clear
suagc <SPIKES | suwig $sz fill=$fill | tube
sleep $time
clear
echo
echo "===>  Now use SUPLANE to create a more interesting synthetic ..."
echo
echo "% suplane taper=1 liner=1 >PDATA"
suplane taper=1 liner=1 >PDATA
echo
echo "===> Look at the data ..."
echo
echo "suwig <PDATA | tube"
sleep $time
clg
clear
suwig <PDATA $sz fill=$fill | tube
sleep $time
clear
echo
echo "===>  Use SUADDNOISE to throw in some noise ..."
echo
echo "% suaddnoise <PDATA sn=2 | suwig | tube"
sleep $time
clg
clear
suaddnoise <PDATA sn=2 | suwig $sz fill=$fill | tube
sleep $time
clear
echo
echo "===>  And SUBAND to bandpass the noisy data ..."
echo
echo "% suaddnoise <PDATA sn=2 | suband | suwig | tube"
sleep $time
clg
clear
suaddnoise <PDATA sn=2 | suband | suwig $sz fill=$fill | tube
sleep $time
echo
echo "===>  Looks like a reasonable synthetic, let's use SUTWIG to get a quality plot ..."
echo
echo "% suaddnoise <PDATA sn=2 | suband >SDATA"
suaddnoise <PDATA sn=2 | suband >SDATA
echo
echo "% sutwig <SDATA title="Synthetic, S/N = 2" | tube"
sleep $time
clear
clg
sutwig <SDATA title="Synthetic, S/N = 2" fill=$fill | tube
echo
sleep $time
clear
echo
echo "===>  Too small!  Try again ..."
echo
echo "% sutwig <SDATA sizex=7 sizet=9 title="Synthetic, S/N = 2" | tube"
sleep $time
clg
clear
sutwig <SDATA title="Synthetic, S/N = 2" $sz fill=$fill | tube
sleep $time
clear
echo
echo "===>  Another viewpoint ..."
echo
echo "% supwig <SDATA sz=3 sizex=13.8 title="Synthetic, S/N = 2" | tube"
sleep $time
clg
clear
supwig <SDATA title="Synthetic, S/N = 2" sz=3 $sz fill=$fill | tube
sleep $time
clg
clear
echo
echo "===>  While experienced users can write alarmingly long pipelines on the fly,"
echo
echo "===>  a common mode is to gradually evolve a \"job file\" to avoid repetitious typing"
echo
echo "===>  and provide a record of the processing.   Here's a typical example:"
echo
sleep $time
clear
cat J.nmo
echo
echo
echo
sleep $bigtime
sleep $time
clear
echo "===>  To see other SU display techniques in a geophysical context, select the 'g' option from the menu."
echo
echo "===>  To explore SU on your own, select the 'c' menu option."
echo
echo "===>  Use SUHELP and SUFIND and the selfdoc facility to find your way with SU."
echo
echo "===>  Try looking at a data set with SUEDIT--the help within suedit is evoked with ?"
sleep $bigtime

rm BARE_TRACES SPIKES SDATA PDATA
clg
clear
echo "Gc"

exit 0
